"use strict";(self.webpackChunkhugo_code_star_site=self.webpackChunkhugo_code_star_site||[]).push([[4812],{5680:(e,n,a)=>{a.d(n,{xA:()=>d,yg:()=>m});var l=a(6540);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function t(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,l)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?t(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):t(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,l,i=function(e,n){if(null==e)return{};var a,l,i={},t=Object.keys(e);for(l=0;l<t.length;l++)a=t[l],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(l=0;l<t.length;l++)a=t[l],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=l.createContext({}),u=function(e){var n=l.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},d=function(e){var n=u(e.components);return l.createElement(o.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},g=l.forwardRef((function(e,n){var a=e.components,i=e.mdxType,t=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(a),g=i,m=p["".concat(o,".").concat(g)]||p[g]||c[g]||t;return a?l.createElement(m,r(r({ref:n},d),{},{components:a})):l.createElement(m,r({ref:n},d))}));function m(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var t=a.length,r=new Array(t);r[0]=g;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[p]="string"==typeof e?e:i,r[1]=s;for(var u=2;u<t;u++)r[u]=a[u];return l.createElement.apply(null,r)}return l.createElement.apply(null,a)}g.displayName="MDXCreateElement"},5358:(e,n,a)=>{a.r(n),a.d(n,{contentTitle:()=>o,default:()=>g,frontMatter:()=>s,metadata:()=>u,toc:()=>d});var l=a(8168),i=a(8587),t=(a(6540),a(5680));const r=["components"],s={title:"Retour sur les bases",sidebar_label:"1 - Bases",sidebar_position:1},o=void 0,u={unversionedId:"b07/cours/cours1",id:"b07/cours/cours1",isDocsHomePage:!1,title:"Retour sur les bases",description:"Hello World",source:"@site/docs/b07/cours/cours1.md",sourceDirName:"b07/cours",slug:"/b07/cours/cours1",permalink:"/site/docs/b07/cours/cours1",editUrl:"https://github.com/HugoCodeStar/site/edit/master/docs/b07/cours/cours1.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Retour sur les bases",sidebar_label:"1 - Bases",sidebar_position:1},sidebar:"B07Sidebar",next:{title:"2 - Orient\xe9-objet",permalink:"/site/docs/b07/cours/cours2"}},d=[{value:"Hello World",id:"hello-world",children:[]},{value:"Commentaire",id:"commentaire",children:[]},{value:"Identificateurs",id:"identificateurs",children:[{value:"R\xe8gles",id:"r\xe8gles",children:[]},{value:"Principes d&#39;une variable",id:"principes-dune-variable",children:[]},{value:"Types",id:"types",children:[]},{value:"D\xe9claration de variables",id:"d\xe9claration-de-variables",children:[]},{value:"D\xe9claration de constantes",id:"d\xe9claration-de-constantes",children:[]},{value:"Conversion et parsing",id:"conversion-et-parsing",children:[]}]},{value:"Expressions",id:"expressions",children:[{value:"Expression dans une assignation",id:"expression-dans-une-assignation",children:[]},{value:"Expression avec des variables",id:"expression-avec-des-variables",children:[]},{value:"Appel de m\xe9thodes dans les expressions",id:"appel-de-m\xe9thodes-dans-les-expressions",children:[]}]},{value:"Op\xe9rateurs",id:"op\xe9rateurs",children:[{value:"Listes des types d&#39;op\xe9rateurs",id:"listes-des-types-dop\xe9rateurs",children:[]},{value:"Assignations",id:"assignations",children:[]},{value:"Arithm\xe9tiques",id:"arithm\xe9tiques",children:[]},{value:"Unaires",id:"unaires",children:[]},{value:"\xc9galit\xe9s et relationnelles",id:"\xe9galit\xe9s-et-relationnelles",children:[]},{value:"Conditionnelles",id:"conditionnelles",children:[]}]},{value:"Conversion de type",id:"conversion-de-type",children:[{value:"Conversion arithm\xe9tique",id:"conversion-arithm\xe9tique",children:[]}]},{value:"Affichage",id:"affichage",children:[{value:"M\xe9thode <code>Write</code>",id:"m\xe9thode-write",children:[]},{value:"M\xe9thode <code>Clear</code>",id:"m\xe9thode-clear",children:[]},{value:"S\xe9quence d&#39;\xe9chappement avec <code></code>",id:"s\xe9quence-d\xe9chappement-avec-",children:[]},{value:"Interpolation de chaine",id:"interpolation-de-chaine",children:[]}]},{value:"Saisit",id:"saisit",children:[]},{value:"Structures de contr\xf4les conditionnels (if)",id:"structures-de-contr\xf4les-conditionnels-if",children:[{value:"Options de la conditionnelle <code>if</code>",id:"options-de-la-conditionnelle-if",children:[]},{value:"Structure de contr\xf4le conditionnelle <code>switch</code>",id:"structure-de-contr\xf4le-conditionnelle-switch",children:[]}]},{value:"Structure de contr\xf4les it\xe9ratives (while/for)",id:"structure-de-contr\xf4les-it\xe9ratives-whilefor",children:[{value:"Structure de contr\xf4le it\xe9rative <code>while</code>",id:"structure-de-contr\xf4le-it\xe9rative-while",children:[]},{value:"Structure de contr\xf4le it\xe9ratif <code>for</code>",id:"structure-de-contr\xf4le-it\xe9ratif-for",children:[]},{value:"Briser et continuer la boucle avec <code>break</code> et <code>continue</code>",id:"briser-et-continuer-la-boucle-avec-break-et-continue",children:[]}]},{value:"Tableaux",id:"tableaux",children:[{value:"Initialisation",id:"initialisation",children:[]},{value:"Acc\xe8s aux \xe9l\xe9ments du tableau",id:"acc\xe8s-aux-\xe9l\xe9ments-du-tableau",children:[]},{value:"Boucle <code>foreach</code>",id:"boucle-foreach",children:[]},{value:"Tableau de deux dimensions",id:"tableau-de-deux-dimensions",children:[]}]},{value:"M\xe9thodes",id:"m\xe9thodes",children:[{value:"Contexte des m\xe9thodes",id:"contexte-des-m\xe9thodes",children:[]},{value:"Passage par valeurs",id:"passage-par-valeurs",children:[]},{value:"Retours",id:"retours",children:[]}]}],p={toc:d},c="wrapper";function g(e){let{components:n}=e,a=(0,i.A)(e,r);return(0,t.yg)(c,(0,l.A)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h2",{id:"hello-world"},"Hello World"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},'Console.WriteLine("Hello World!");\n')),(0,t.yg)("h2",{id:"commentaire"},"Commentaire"),(0,t.yg)("p",null,"Deux types: "),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Ligne simple d\xe9butante par ",(0,t.yg)("inlineCode",{parentName:"li"},"//")),(0,t.yg)("li",{parentName:"ul"},"Plusieurs lignes d\xe9limit\xe9es par ",(0,t.yg)("inlineCode",{parentName:"li"},"/*")," et ",(0,t.yg)("inlineCode",{parentName:"li"},"*/"))),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},'/*\nUn commentaire\nsur plusieurs lignes.\n*/\n\n// Affiche un message.\nConsole.WriteLine("Hello World!"); //Marche ici aussi!\n')),(0,t.yg)("h2",{id:"identificateurs"},"Identificateurs"),(0,t.yg)("p",null,"Un identificateur est un nom donn\xe9 par le programmeur \xe0 un \xe9l\xe9ment du programme. "),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"variables"),(0,t.yg)("li",{parentName:"ul"},"m\xe9thodes"),(0,t.yg)("li",{parentName:"ul"},"classes")),(0,t.yg)("h3",{id:"r\xe8gles"},"R\xe8gles"),(0,t.yg)("p",null,"Les r\xe8gles de cr\xe9ation des identificateurs :"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Dois d\xe9buter par une lettre, le ",(0,t.yg)("inlineCode",{parentName:"li"},"@")," ou un tiret-bas ",(0,t.yg)("inlineCode",{parentName:"li"},"_"),";"),(0,t.yg)("li",{parentName:"ul"},"Les restes de caract\xe8res doivent \xeatre des lettres, de chiffres ou des tirets bas."),(0,t.yg)("li",{parentName:"ul"},"Ne dois pas \xeatre un mot r\xe9serv\xe9 par le langage.")),(0,t.yg)("p",null,"Faire attention aux conventions suivantes:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Faire attention \xe0 la casse. Il y a distinction entre les lettres majuscules et minuscules;"),(0,t.yg)("li",{parentName:"ul"},"Les noms des variables sont en ",(0,t.yg)("inlineCode",{parentName:"li"},"camelCase")," ou les lettres sont mises en majuscules pour indiquer un nouveau mot.")),(0,t.yg)("h3",{id:"principes-dune-variable"},"Principes d'une variable"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Une variable permet de sauvegarder une information pour utilisation future;"),(0,t.yg)("li",{parentName:"ul"},"Une variable est la combinaison d\u2019un espace me\u0301moire re\u0301serve\u0301 (type), un identificateur et une valeur;"),(0,t.yg)("li",{parentName:"ul"},"Les variables peuvent contenir toutes sortes d'informations;"),(0,t.yg)("li",{parentName:"ul"},"\xc9tudions premi\xe8rement les types primitifs repr\xe9sentant directement des valeurs.")),(0,t.yg)("h3",{id:"types"},"Types"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Entier",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"byte")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"short")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"int")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"long")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"sbyte")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"ushort")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"uint")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"ulong")))),(0,t.yg)("li",{parentName:"ul"},"Flottant",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"float")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"double")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"decimal")))),(0,t.yg)("li",{parentName:"ul"},"Caract\xe8re",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"char")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"string")))),(0,t.yg)("li",{parentName:"ul"},"Logique",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"bool"),", deux valeurs possibles",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"true")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"false"))))))),(0,t.yg)("h3",{id:"d\xe9claration-de-variables"},"D\xe9claration de variables"),(0,t.yg)("p",null,"La d\xe9claration se fait avec la syntaxe suivante:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},"type nomVariable;\n// ou\ntype nomVariable = valeurInitiale;\n\n\n// Exemple\nint x;\ndouble y = 4.5;\n")),(0,t.yg)("h3",{id:"d\xe9claration-de-constantes"},"D\xe9claration de constantes"),(0,t.yg)("p",null,"Le mot cl\xe9 ",(0,t.yg)("inlineCode",{parentName:"p"},"const")," permet de d\xe9clarer une constante qui ne pourra pas \xeatre modifi\xe9e.\nPar convention, le nom de constantes est en majuscules."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},"const int MA_CONSTANTE = 20;\n")),(0,t.yg)("h3",{id:"conversion-et-parsing"},"Conversion et parsing"),(0,t.yg)("p",null,"La classe ",(0,t.yg)("inlineCode",{parentName:"p"},"Convert")," contient des m\xe9thodes pour la conversion de type.\nLes nom de la m\xe9thode est ",(0,t.yg)("inlineCode",{parentName:"p"},"ToType")," par exemple ",(0,t.yg)("inlineCode",{parentName:"p"},"Convert.ToInt32(val)"),"."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},'string texte = "7";\nint nombre = Convert.ToInt32(texte);\nConsole.Write(nombre);\n')),(0,t.yg)("h2",{id:"expressions"},"Expressions"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Une expression est un \xe9l\xe9ment qui va ultimement repr\xe9senter une valeur."),(0,t.yg)("li",{parentName:"ul"},"L'expression peut directement \xeatre une valeur."),(0,t.yg)("li",{parentName:"ul"},'Si l\'expression \xe0 des op\xe9rations, elle est \xe9valu\xe9e pour "devenir" une valeur finale.'),(0,t.yg)("li",{parentName:"ul"},"Plusieurs endroits demandent des expressions. Chaque fois, l'expression va \xeatre \xe9valu\xe9e.")),(0,t.yg)("h3",{id:"expression-dans-une-assignation"},"Expression dans une assignation"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"La partie de droite d'une assignation est une expression et peut donc \xeatre une s\xe9rie d'op\xe9rations.")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},"int x;\n// Assignation avec une expression d'une valeur litt\xe9rale.\nx = 4;\n\nint y;\n// L'expression va \xeatre \xe9valu\xe9e \xe0 10 avant d'\xeatre assign\xe9e.\ny = 7 + 3;\n")),(0,t.yg)("h3",{id:"expression-avec-des-variables"},"Expression avec des variables"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"L'utilisation de variables dans les expressions permet d'utiliser le contenu d'une variable dans l'expression."),(0,t.yg)("li",{parentName:"ul"},"Le contenu de la variable va \xeatre remplac\xe9 dans l'expression avant que l'expression soit \xe9valu\xe9e.")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},"int x;\nx = 5;\n\nint y;\n// Le x est remplac\xe9 par sa valeur de 5.\n// L'expression est donc \xe9valu\xe9e comme 5 + 3\ny = x + 3;\n\n// Ne change pas la valeur de y car\n// l'\xe9valuation est ponctuelle.\n\nx = 10;\n")),(0,t.yg)("h3",{id:"appel-de-m\xe9thodes-dans-les-expressions"},"Appel de m\xe9thodes dans les expressions"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Des m\xe9thodes peuvent \xeatre appel\xe9es \xe0 l'int\xe9rieur d'une expression. Le r\xe9sultat de la m\xe9thode sera utilis\xe9 \xe0 la place de l'appel dans l'expression.")),(0,t.yg)("h2",{id:"op\xe9rateurs"},"Op\xe9rateurs"),(0,t.yg)("h3",{id:"listes-des-types-dop\xe9rateurs"},"Listes des types d'op\xe9rateurs"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Assignations"),(0,t.yg)("li",{parentName:"ul"},"Arithm\xe9tiques"),(0,t.yg)("li",{parentName:"ul"},"Unaires"),(0,t.yg)("li",{parentName:"ul"},"\xc9galit\xe9s et relationnelles"),(0,t.yg)("li",{parentName:"ul"},"Conditionnelles"),(0,t.yg)("li",{parentName:"ul"},"Comparaisons de type"),(0,t.yg)("li",{parentName:"ul"},"Binaires"),(0,t.yg)("li",{parentName:"ul"},"Terniaires")),(0,t.yg)("h3",{id:"assignations"},"Assignations"),(0,t.yg)("p",null,"Utilis\xe9 \xe0 l'assignation de valeur \xe0 des variables."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},"int cadence = 4;\n")),(0,t.yg)("h3",{id:"arithm\xe9tiques"},"Arithm\xe9tiques"),(0,t.yg)("p",null,"Les op\xe9rations arithm\xe9tiques de bases ont les op\xe9rateurs typiques"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"+")," Addition"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"-")," Soustraction"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"*")," Multiplication"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"\\")," Division"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"%")," Modulo")),(0,t.yg)("h4",{id:"le-modulo-dun-nombre"},"Le modulo d'un nombre"),(0,t.yg)("p",null,"L'op\xe9rateur modulo d\xe9termine le restant entier d'une division. Enl\xe8ve la partie enti\xe8re en restant positif."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},"14 % 5 // Enl\xe8ve 5 deux fois et reste 4.\n20 % 2 // Enl\xe8ve 2 dix fois et reste 0.\n")),(0,t.yg)("h3",{id:"unaires"},"Unaires"),(0,t.yg)("p",null,"Les op\xe9rateurs unaires travaillent sur une seule valeur. Le plus reconnu est le n\xe9gatif ",(0,t.yg)("inlineCode",{parentName:"p"},"-"),"."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"+")," Plus unaire. Indique qu'une valeur est positive. Cet op\xe9rateur est implicite sur les valeurs."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"-")," Moins unaire. Indique qu'une valeur est n\xe9gative."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"!")," Compl\xe9ment logique. Inverse la valeur bool\xe9enne."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"++")," Incr\xe9mentation. Incr\xe9mente la valeur de 1."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"--")," D\xe9cr\xe9mentation. D\xe9cr\xe9mente la valeur de 1.")),(0,t.yg)("h3",{id:"\xe9galit\xe9s-et-relationnelles"},"\xc9galit\xe9s et relationnelles"),(0,t.yg)("p",null,"Les op\xe9rations relationnelles retournent une valeur bool\xe9enne par rapport \xe0 l'op\xe9ration demand\xe9e."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"==")," \xc9gale \xe0"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"!=")," Diff\xe9rent de"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},">")," Plus grand"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"<")," Plus petit"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},">=")," Plus grand ou \xe9gale"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"<=")," Plus petit ou \xe9gale")),(0,t.yg)("h3",{id:"conditionnelles"},"Conditionnelles"),(0,t.yg)("p",null,"Les op\xe9rateurs conditionnels prennent des valeurs bool\xe9ennes et retournent des valeurs bool\xe9ennes."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"&&")," Et logique"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"||")," Ou logique"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"? :")," Op\xe9rateur terniaire ",(0,t.yg)("inlineCode",{parentName:"li"},"if-then-else"))),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",{parentName:"tr",align:null},"A"),(0,t.yg)("th",{parentName:"tr",align:null},"B"),(0,t.yg)("th",{parentName:"tr",align:null},"A && B"),(0,t.yg)("th",{parentName:"tr",align:null},"A ","|","|"," B"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"0"),(0,t.yg)("td",{parentName:"tr",align:null},"0"),(0,t.yg)("td",{parentName:"tr",align:null},"false"),(0,t.yg)("td",{parentName:"tr",align:null},"false")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"0"),(0,t.yg)("td",{parentName:"tr",align:null},"1"),(0,t.yg)("td",{parentName:"tr",align:null},"false"),(0,t.yg)("td",{parentName:"tr",align:null},"true")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"1"),(0,t.yg)("td",{parentName:"tr",align:null},"0"),(0,t.yg)("td",{parentName:"tr",align:null},"false"),(0,t.yg)("td",{parentName:"tr",align:null},"true")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",{parentName:"tr",align:null},"1"),(0,t.yg)("td",{parentName:"tr",align:null},"1"),(0,t.yg)("td",{parentName:"tr",align:null},"true"),(0,t.yg)("td",{parentName:"tr",align:null},"true")))),(0,t.yg)("h4",{id:"op\xe9rateur-terniaire"},"Op\xe9rateur terniaire"),(0,t.yg)("p",null,"L'op\xe9rateur terniaire permet d'avoir un conditionnelle simple avec un retour direct."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},"result = someCondition ? value1 : value2;\n")),(0,t.yg)("p",null,"Il faut parfois transformer une donn\xe9e d'un certain type en un autre. Il est possible de faire la conversion d'un type \xe0 un autre avec le casting de Java."),(0,t.yg)("p",null,"Pour faire une conversion, on met le type voulu entre parenth\xe8ses avant l'expression d'un certain autre type."),(0,t.yg)("h2",{id:"conversion-de-type"},"Conversion de type"),(0,t.yg)("h3",{id:"conversion-arithm\xe9tique"},"Conversion arithm\xe9tique"),(0,t.yg)("p",null,"La conversion de type est souvent utilis\xe9e quand on veut transformer une valeur num\xe9rique d'un type \xe0 un autre. Pour la sauvegarder dans une variable donn\xe9e ou encore pour l'envoy\xe9 \xe0 une m\xe9thode qui demande un certain type pr\xe9cis."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},"int x = 2;\n// Trouver la puissance de 2 \xe0 la 4\nint pow_x = (int) Math.Pow(x, 4);\n")),(0,t.yg)("p",null,"Dans l'exemple pr\xe9c\xe9dent, les param\xe8tres utilis\xe9s pour la m\xe9thode ",(0,t.yg)("inlineCode",{parentName:"p"},"Pow")," sont des ",(0,t.yg)("inlineCode",{parentName:"p"},"int")," mais Java le laisse passer, car une conversion automatique se fait de ",(0,t.yg)("inlineCode",{parentName:"p"},"int")," \xe0 ",(0,t.yg)("inlineCode",{parentName:"p"},"double")," sans perte de pr\xe9cision. Pour le retour par contre, il est possible que la valeur ",(0,t.yg)("inlineCode",{parentName:"p"},"double")," soit tronqu\xe9e et java ne laisse pas passer ce genre d'ambig\xfcit\xe9. Il faut donc forcer la conversion du retour de ",(0,t.yg)("inlineCode",{parentName:"p"},"Pow")," en ",(0,t.yg)("inlineCode",{parentName:"p"},"int")," pour l'assigner dans une variable de type ",(0,t.yg)("inlineCode",{parentName:"p"},"int"),"."),(0,t.yg)("h2",{id:"affichage"},"Affichage"),(0,t.yg)("p",null,"L'affichage de nos programmes se fait dans la fen\xeatre de commande avec les m\xe9thodes d'affichages fournies par la classe ",(0,t.yg)("inlineCode",{parentName:"p"},"Console"),"."),(0,t.yg)("h3",{id:"m\xe9thode-write"},"M\xe9thode ",(0,t.yg)("inlineCode",{parentName:"h3"},"Write")),(0,t.yg)("p",null,"La m\xe9thode ",(0,t.yg)("inlineCode",{parentName:"p"},"Write")," permet d'afficher une chaine de caract\xe8res."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},'Console.Write("Allo");\n')),(0,t.yg)("p",null,"La m\xe9thode ",(0,t.yg)("inlineCode",{parentName:"p"},"WriteLine")," ajoute une saut de ligne apr\xe8s l'affichage."),(0,t.yg)("h3",{id:"m\xe9thode-clear"},"M\xe9thode ",(0,t.yg)("inlineCode",{parentName:"h3"},"Clear")),(0,t.yg)("p",null,"La m\xe9thode ",(0,t.yg)("inlineCode",{parentName:"p"},"Clear")," permet de vider l'affichage courant."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},'Console.Write("Allo");\nConsole.Clear()\nConsole.Write("Salut");\n')),(0,t.yg)("h3",{id:"s\xe9quence-d\xe9chappement-avec-"},"S\xe9quence d'\xe9chappement avec ",(0,t.yg)("inlineCode",{parentName:"h3"},"\\")),(0,t.yg)("p",null,"Le caract\xe8re ",(0,t.yg)("inlineCode",{parentName:"p"},"\\")," permet de changer un caract\xe8re sp\xe9ciale \xe0 un caract\xe8re normale."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},'Console.Write("Ceci est un double guillement : \\" ");\n')),(0,t.yg)("p",null,"Inversement, certain caract\xe8re peuvent devenir sp\xe9ciaux avec un ",(0,t.yg)("inlineCode",{parentName:"p"},"\\"),". Le ",(0,t.yg)("inlineCode",{parentName:"p"},"\\n")," permet de faire un saut de ligne."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},'Console.Write("Ceci est\\nsur deux ligne");\n')),(0,t.yg)("h3",{id:"interpolation-de-chaine"},"Interpolation de chaine"),(0,t.yg)("p",null,"Il est possible de faire de la concat\xe9nation avec le ",(0,t.yg)("inlineCode",{parentName:"p"},"+"),"."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},'int number = 7;\nConsole.Write("Mon chiffre pr\xe9f\xe9r\xe9 est : " + number + " !");\n')),(0,t.yg)("p",null,"Il est aussi possible d'utiliser le pr\xe9fixe ",(0,t.yg)("inlineCode",{parentName:"p"},"$")," sur la chaine pour avoir un environnement \xe9valu\xe9 entre des ",(0,t.yg)("inlineCode",{parentName:"p"},"{}")," dans une chaine."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},'int number = 7;\nConsole.Write($"Mon chiffre pr\xe9f\xe9r\xe9 est : {number} !");\n')),(0,t.yg)("h2",{id:"saisit"},"Saisit"),(0,t.yg)("p",null,"La saisit de texte de l'utilisateur se fait avec la m\xe9thode ",(0,t.yg)("inlineCode",{parentName:"p"},"ReadLine")," de la classe ",(0,t.yg)("inlineCode",{parentName:"p"},"Console"),". Elle retourne la chaine lue sur la ligne."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},"string texte = Console.ReadLine();\nConsole.Write(texte);\n")),(0,t.yg)("h2",{id:"structures-de-contr\xf4les-conditionnels-if"},"Structures de contr\xf4les conditionnels (if)"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"La structure conditionnelle nous permet de prendre des d\xe9cisions durant l'ex\xe9cution de nos programmes."),(0,t.yg)("li",{parentName:"ul"},"La d\xe9cision \xe0 prendre doit \xeatre prise sur une expression logique (vrai ou faux)."),(0,t.yg)("li",{parentName:"ul"},"La syntaxe de base est la suivante:")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},"if (expression bool\xe9enne)\n{\n    instructions\n}\n")),(0,t.yg)("h3",{id:"options-de-la-conditionnelle-if"},"Options de la conditionnelle ",(0,t.yg)("inlineCode",{parentName:"h3"},"if")),(0,t.yg)("p",null,"Plusieurs options sont disponibles avec le if."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},"if (expression bool\xe9enne)\n{\n    instructions\n} \nelse if (expression bool\xe9enne)\n{\n    instructions\n} \nelse \n{\n    instruction\n}\n")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Seul un des blocs d\u2019instructions (d\xe9cision) du ",(0,t.yg)("inlineCode",{parentName:"li"},"if")," est ex\xe9cut\xe9"),(0,t.yg)("li",{parentName:"ul"},"Le ",(0,t.yg)("inlineCode",{parentName:"li"},"elseif")," et le ",(0,t.yg)("inlineCode",{parentName:"li"},"else")," sont facultatifs"),(0,t.yg)("li",{parentName:"ul"},"Le ",(0,t.yg)("inlineCode",{parentName:"li"},"elseif")," peut \xeatre r\xe9p\xe9t\xe9 \xe0 plusieurs reprises avec diff\xe9rentes expressions")),(0,t.yg)("h3",{id:"structure-de-contr\xf4le-conditionnelle-switch"},"Structure de contr\xf4le conditionnelle ",(0,t.yg)("inlineCode",{parentName:"h3"},"switch")),(0,t.yg)("p",null,"Le ",(0,t.yg)("inlineCode",{parentName:"p"},"switch")," est utilis\xe9 pour prendre une d\xe9cision par rapport \xe0 la valeur d'une seule variable"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},"switch (variable) \n{\n    case 1: \n        instructions\n        break;\n    case 2: \n        instructions\n        break;\n    default:\n        instructions\n        break;\n}\n")),(0,t.yg)("h2",{id:"structure-de-contr\xf4les-it\xe9ratives-whilefor"},"Structure de contr\xf4les it\xe9ratives (while/for)"),(0,t.yg)("h3",{id:"structure-de-contr\xf4le-it\xe9rative-while"},"Structure de contr\xf4le it\xe9rative ",(0,t.yg)("inlineCode",{parentName:"h3"},"while")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"La boucle ",(0,t.yg)("inlineCode",{parentName:"li"},"while")," r\xe9p\xe8te les instructions jusqu\u2019\xe0 ce que la condition soit fausse.")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},"while (condition)\n{\n    instructions\n}\n")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Le ",(0,t.yg)("inlineCode",{parentName:"li"},"while")," est habituellement utilis\xe9 quand on ne connait pas le nombre d\u2019it\xe9rations \xe0 faire.")),(0,t.yg)("h3",{id:"structure-de-contr\xf4le-it\xe9ratif-for"},"Structure de contr\xf4le it\xe9ratif ",(0,t.yg)("inlineCode",{parentName:"h3"},"for")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Lorsque le nombre d\u2019it\xe9rations est connu, la boucle ",(0,t.yg)("inlineCode",{parentName:"li"},"for")," sera utilis\xe9e."),(0,t.yg)("li",{parentName:"ul"},"La boucle ",(0,t.yg)("inlineCode",{parentName:"li"},"for")," utilise un compteur qui est configur\xe9 au d\xe9but de la boucle.")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},'for (initialization; termination; increment) \n{\n    instruction\n}\n\nfor(int i = 0; i < 10; i++)\n{\n    Console.WriteLine("i est: " + i);\n}\n')),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"L'initialisation va \xeatre une instruction faite avant le d\xe9but de la boucle."),(0,t.yg)("li",{parentName:"ul"},"La terminaison est la condition test\xe9e pour continuer la boucle \xe0 chaque it\xe9ration."),(0,t.yg)("li",{parentName:"ul"},"L'incr\xe9ment est une instruction ex\xe9cut\xe9e \xe0 chaque it\xe9ration de la boucle."),(0,t.yg)("li",{parentName:"ul"},"Un compteur est configur\xe9 avec ces instructions.")),(0,t.yg)("h3",{id:"briser-et-continuer-la-boucle-avec-break-et-continue"},"Briser et continuer la boucle avec ",(0,t.yg)("inlineCode",{parentName:"h3"},"break")," et ",(0,t.yg)("inlineCode",{parentName:"h3"},"continue")),(0,t.yg)("p",null,"Le mot cl\xe9 ",(0,t.yg)("inlineCode",{parentName:"p"},"break")," permet de briser la boucle la plus proche."),(0,t.yg)("p",null,"Le mot cl\xe9 ",(0,t.yg)("inlineCode",{parentName:"p"},"continue")," permet de sauter \xe0 la prochaine it\xe9ration de la boucle la plus proche."),(0,t.yg)("h2",{id:"tableaux"},"Tableaux"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Les tableaux sont des collections de plusieurs \xe9l\xe9ments de m\xeame type sous un seul identificateur"),(0,t.yg)("li",{parentName:"ul"},"Le tableau est construit de cases m\xe9moire cons\xe9cutives en m\xe9moire"),(0,t.yg)("li",{parentName:"ul"},"\xc0 chaque \xe9l\xe9ment du tableau, on associe un indice qui permet de facilement acc\xe9der aux cases individuellement"),(0,t.yg)("li",{parentName:"ul"},"Les tableaux sont statiques, une fois cr\xe9\xe9s, ils ne peuvent changer de taille")),(0,t.yg)("h3",{id:"initialisation"},"Initialisation"),(0,t.yg)("p",null,"Un nouveau tableau est cr\xe9\xe9 avec le ",(0,t.yg)("inlineCode",{parentName:"p"},"new"),". Les braquettes carr\xe9es ",(0,t.yg)("inlineCode",{parentName:"p"},"[")," ",(0,t.yg)("inlineCode",{parentName:"p"},"]")," seront utilis\xe9es pour indiquer l'utilisation d'un tableau."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},"// Tableau de 10 cases de ints\nint[] nombres = new int[10];\ndouble[] nombresDirect = new double[] {45.4, -56.43, 34.6};\n\n// L'initialisation peut utiliser une taille variable\nint taille = Convert.ToInt32(Console.ReadLine());\ndouble[] nombresReel = new double[taille];\n")),(0,t.yg)("h3",{id:"acc\xe8s-aux-\xe9l\xe9ments-du-tableau"},"Acc\xe8s aux \xe9l\xe9ments du tableau"),(0,t.yg)("p",null,"Les braquettes carr\xe9es vont nous permettre de s\xe9lectionner une case sp\xe9cifique du tableau.\nFaire attention, ",(0,t.yg)("strong",{parentName:"p"},"la premi\xe8re case du tableau est la case 0"),"."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},"// Parcourir les cases d'un tableau\nfor (int i = 0; i < nombres.Length; i++)\n{\n    Console.WriteLine(nombres[i]);\n}\n")),(0,t.yg)("h3",{id:"boucle-foreach"},"Boucle ",(0,t.yg)("inlineCode",{parentName:"h3"},"foreach")),(0,t.yg)("p",null,"Il existe une autre boucle for pour parcourir tous les \xe9l\xe9ments d'un tableau. La syntaxe est simplifi\xe9e, mais il existe des limitations \xe0 la boucle."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-java"},"// Trouvez la somme des \xe9l\xe9ments\nforeach (double el in nombres) \n{\n    somme += el;\n}\n")),(0,t.yg)("p",null,"Les limitations sont les suivantes :"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"L'it\xe9rateur n'est pas disponible dans la boucle."),(0,t.yg)("li",{parentName:"ul"},"L'ordre des op\xe9rations n'est pas pr\xe9cis\xe9. La premi\xe8re it\xe9ration de la boucle ne va pas n\xe9cessairement regarder le premier \xe9l\xe9ment."),(0,t.yg)("li",{parentName:"ul"},"Il est interdit de modifier les \xe9l\xe9ments du tableau.")),(0,t.yg)("h3",{id:"tableau-de-deux-dimensions"},"Tableau de deux dimensions"),(0,t.yg)("p",null,"Il est possible de d\xe9clarer et d'utiliser des tableaux de deux dimensions en ajoutant un virgule es braquettes carr\xe9es. Le premier nombre indique la ligne et le deuxi\xe8me nombre la colonne."),(0,t.yg)("p",null,"Les tableaux de deux dimensions sont rectangulaires. Chaque ligne et colonne seront obligatoirement de m\xeame taille."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},'int[,] tabPosition = new int[10, 2];\n\nint[,] counts = new int[,] \n{\n    {1, 2},\n    {3, 4}\n};\n\n// Parcourir un tableau de deux dimensions\nfor (int i = 0; i < counts.GetLength(0); i++) \n{\n    for (int j = 0; j < counts.GetLength(1); j++) \n    {\n        Console.Write($"{counts[i, j], 4}"); \n    }\n    Console.WriteLine(); \n}\n')),(0,t.yg)("h2",{id:"m\xe9thodes"},"M\xe9thodes"),(0,t.yg)("p",null,"Les m\xe9thodes sont des blocs de d'instructions que nous pouvons d\xe9finir et faire appel \xe0 r\xe9p\xe9tition."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},'//D\xe9finition de la m\xe9thode\nvoid TestMethod()\n{\n    Console.Write("test");\n}\n\n//Appel de la m\xe9thode\nTestMethod();\nTestMethod();\n')),(0,t.yg)("h3",{id:"contexte-des-m\xe9thodes"},"Contexte des m\xe9thodes"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},'Les m\xe9thodes sont contextualis\xe9es \xe0 leurs appels. Le contexte permet d\'avoir un environnement "ferm\xe9" aux informations externes.'),(0,t.yg)("li",{parentName:"ul"},"Les variables d'instances sont disponibles \xe0 l'int\xe9rieur de m\xe9thodes."),(0,t.yg)("li",{parentName:"ul"},"Toutes variables locales \xe0 la m\xe9thode sont d\xe9truites apr\xe8s l'appel de la m\xe9thode.")),(0,t.yg)("h3",{id:"passage-par-valeurs"},"Passage par valeurs"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"L'appel de m\xe9thodes se fait en envoyant les param\xe8tres. Quand un param\xe8tre est utilis\xe9 (param\xe8tres effectifs), la valeur de celui-ci est envoy\xe9e \xe0 la m\xe9thode."),(0,t.yg)("li",{parentName:"ul"},"Les valeurs re\xe7ues sont assign\xe9es en variables locales aux param\xe8tres identifi\xe9s dans la signature de la m\xe9thode (param\xe8tres formels)."),(0,t.yg)("li",{parentName:"ul"},"Les param\xe8tres de types primitifs seront donc modifiables durant la m\xe9thode, mais seront d\xe9truits \xe0 la fin de l'appel."),(0,t.yg)("li",{parentName:"ul"},"Les param\xe8tres d'objets n'auront pas le m\xeame comportement, car ce sont des r\xe9f\xe9rences")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},"void Count(int numberToCount)\n{\n    for (int cur = 1; cur <= numberToCount; cur++)\n    {\n        Console.WriteLine(cur);\n    }\n}\n\nCount(3);\nCount(7);\n")),(0,t.yg)("h3",{id:"retours"},"Retours"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},'La seule information qui "sort" de la m\xe9thode est le retour.'),(0,t.yg)("li",{parentName:"ul"},"Comme les param\xe8tres, seule la valeur du retour sera renvoy\xe9e."),(0,t.yg)("li",{parentName:"ul"},"On utilise l'instruction ",(0,t.yg)("inlineCode",{parentName:"li"},"return")," pour envoyer une valeur de retour."),(0,t.yg)("li",{parentName:"ul"},"La m\xe9thode se termine imm\xe9diatement apr\xe8s l'utilisation d'un ",(0,t.yg)("inlineCode",{parentName:"li"},"return"),".")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-c#"},"double AireTriangle(double base, double hauteur)\n{\n    return base * hauteur;\n}\n")))}g.isMDXComponent=!0}}]);