"use strict";(self.webpackChunkhugo_code_star_site=self.webpackChunkhugo_code_star_site||[]).push([[9167],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>g});var r=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=r.createContext({}),u=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(o.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),m=i,g=p["".concat(o,".").concat(m)]||p[m]||d[m]||a;return t?r.createElement(g,s(s({ref:n},c),{},{components:t})):r.createElement(g,s({ref:n},c))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,s=new Array(a);s[0]=m;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l[p]="string"==typeof e?e:i,s[1]=l;for(var u=2;u<a;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1731:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>u,toc:()=>c});var r=t(8168),i=t(8587),a=(t(6540),t(5680));const s=["components"],l={title:"Interface",sidebar_label:"6 - Interface",sidebar_position:6},o=void 0,u={unversionedId:"b07/cours/cours6",id:"b07/cours/cours6",isDocsHomePage:!1,title:"Interface",description:"Questions pr\xe9liminaires",source:"@site/docs/b07/cours/cours6.md",sourceDirName:"b07/cours",slug:"/b07/cours/cours6",permalink:"/site/docs/b07/cours/cours6",editUrl:"https://github.com/HugoCodeStar/site/edit/master/docs/b07/cours/cours6.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Interface",sidebar_label:"6 - Interface",sidebar_position:6},sidebar:"B07Sidebar",previous:{title:"5 - H\xe9ritage & Polymorphisme",permalink:"/site/docs/b07/cours/cours5"},next:{title:"7 - Exception",permalink:"/site/docs/b07/cours/cours7"}},c=[{value:"Questions pr\xe9liminaires",id:"questions-pr\xe9liminaires",children:[{value:"Inventaire de vente",id:"inventaire-de-vente",children:[]},{value:"Compte banque",id:"compte-banque",children:[]}]},{value:"Interface",id:"interface",children:[{value:"D\xe9claration d&#39;une interface",id:"d\xe9claration-dune-interface",children:[]},{value:"Impl\xe9mentation d&#39;une interface",id:"impl\xe9mentation-dune-interface",children:[]},{value:"Utilisation d&#39;une interface",id:"utilisation-dune-interface",children:[]}]},{value:"La classe <code>List&lt;T&gt;</code>",id:"la-classe-listt",children:[{value:"D\xe9claration d&#39;une <code>List</code>",id:"d\xe9claration-dune-list",children:[]},{value:"Indexer un \xe9l\xe9ment",id:"indexer-un-\xe9l\xe9ment",children:[]},{value:"Ajoutez et retirer des \xe9l\xe9ments de la liste",id:"ajoutez-et-retirer-des-\xe9l\xe9ments-de-la-liste",children:[]},{value:"Parcourir les listes",id:"parcourir-les-listes",children:[]}]}],p={toc:c},d="wrapper";function m(e){let{components:n}=e,t=(0,i.A)(e,s);return(0,a.yg)(d,(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"questions-pr\xe9liminaires"},"Questions pr\xe9liminaires"),(0,a.yg)("p",null,"\xc9crivez les classes suivantes:"),(0,a.yg)("h3",{id:"inventaire-de-vente"},"Inventaire de vente"),(0,a.yg)("p",null,"Un item dans l'inventaire d'un magasin"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"L'item a un cout, un nom et une description"),(0,a.yg)("li",{parentName:"ul"},"L'item peux \xeatre en rabais. Un indicateur sauvegarde si l'item est en rabais, la taux du rabais est aussi sauvegard\xe9."),(0,a.yg)("li",{parentName:"ul"},"L'item pr\xe9sente sont prix comme \xe9tant le cout modifier par le rabais si il est applicable.")),(0,a.yg)("h3",{id:"compte-banque"},"Compte banque"),(0,a.yg)("p",null,"Un compre de banque avec les \xe9l\xe9ments suivants:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Le solde du compte qui est visible mais non modifiable."),(0,a.yg)("li",{parentName:"ul"},"Une m\xe9thode pour d\xe9poser un montant."),(0,a.yg)("li",{parentName:"ul"},"Une m\xe9thode pour retirer un montant. Si le montant d\xe9passe le solde, on ne retire que ce qui est disponible.")),(0,a.yg)("p",null,"Ajoutez \xe0 cette classe deux classe d\xe9riv\xe9 pour des comptes cr\xe9dit et des comptes d'\xe9pargne."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Les comptes cr\xe9dit peuvent faire des retrait m\xeame si ce dernier d\xe9passe le solde. Une nouvelle propri\xe9t\xe9s indique le nouveau maximum n\xe9gatif possible."),(0,a.yg)("li",{parentName:"ul"},"Les comptes d'\xe9pargne ont un taux d'\xe9pargne, il est possigne de faire gagner l'\xe9pargne du compte avec une m\xe9thode.")),(0,a.yg)("h2",{id:"interface"},"Interface"),(0,a.yg)("p",null,"L'interface est un syst\xe8me qui permet aux classes d'indiquer qu'il se conforment \xe0 certaines m\xe9thodes."),(0,a.yg)("p",null,"Cela permet ensuite d'utiliser des objets se conformant \xe0 l'interface m\xeame si les objets peuvent \xeatre autrement tr\xe8s diff\xe9rents."),(0,a.yg)("p",null,"L'interface sera une d\xe9claration \xe0 part qui ressemble \xe0 une classe, mais qui ne peut pas \xeatre instanc\xe9. D'autres classes pourront impl\xe9menter l'interface."),(0,a.yg)("p",null,"Contrairement \xe0 l'h\xe9ritage, les classes peuvent impl\xe9menter plusieurs interfaces en m\xeame temps."),(0,a.yg)("p",null,"Les interfaces ressemble \xe0 la description de classe abstraite mais peuvent \xeatre combin\xe9 dans leurs impl\xe9mentations de classe."),(0,a.yg)("h3",{id:"d\xe9claration-dune-interface"},"D\xe9claration d'une interface"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},"public interface IPrice\n{\n    double Price { get; }\n}\n\npublic interface IReset\n{\n    void Reset();\n}\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Les interfaces n'ont pas de constructeur, car ce ne sont pas des classes \xe0 part enti\xe8re."),(0,a.yg)("li",{parentName:"ul"},"Les interface ne peuvent pas avoir de variables d'instances, mais les propri\xe9t\xe9s sont possible."),(0,a.yg)("li",{parentName:"ul"},"Les m\xe9thodes des interfaces sont automatiquement publiques."),(0,a.yg)("li",{parentName:"ul"},"Par convention, les interfaces commencent par la lettre ",(0,a.yg)("inlineCode",{parentName:"li"},"I"),".")),(0,a.yg)("h3",{id:"impl\xe9mentation-dune-interface"},"Impl\xe9mentation d'une interface"),(0,a.yg)("p",null,"Les interfaces doivents \xeatre impl\xe9ment\xe9 pas des classes. L'impl\xe9mentation d'une interface permet de dire que la classe se \"conforme\" \xe0 l'interface."),(0,a.yg)("p",null,"Il est possible de se conformer \xe0 plusieurs interface."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},"public class BankAccount : IPrice,IReset\n{\n    public double Balance { get; private set; }\n    public double Price\n    {\n        get => Balance;\n    }\n\n    public void Reset()\n    {\n        Balance = 0;\n    }\n}\n")),(0,a.yg)("h3",{id:"utilisation-dune-interface"},"Utilisation d'une interface"),(0,a.yg)("p",null,"Une fois l'interface \xe9tablie, il est possible pour n'importe quels m\xe9thodes d'utiliser l'inteface comme param\xe8tres ou retour. Il sera possible d'utiliser seulement les fonctionnalit\xe9s fourni par l'interface \xe0 travers ce m\xe9canisme."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},"double AddPrices(IPrice p1, IPrice p2) => p1.Price + p2.Price;\n")),(0,a.yg)("h2",{id:"la-classe-listt"},"La classe ",(0,a.yg)("inlineCode",{parentName:"h2"},"List<T>")),(0,a.yg)("p",null,"Un ",(0,a.yg)("inlineCode",{parentName:"p"},"List")," est un objet qui permet d'emmagasiner une collection d'objets. Le ",(0,a.yg)("inlineCode",{parentName:"p"},"<T>")," repr\xe9sente un type g\xe9n\xe9rique que nous pourrons remplacer par ce que nous voullons enmagasiner dans la collection."),(0,a.yg)("p",null,"Les ",(0,a.yg)("inlineCode",{parentName:"p"},"List")," offrent deux avantages sur les tableaux :"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Leur taille est dynamique"),(0,a.yg)("li",{parentName:"ul"},"Des m\xe9thodes sont fournies pour les actions communes.")),(0,a.yg)("h3",{id:"d\xe9claration-dune-list"},"D\xe9claration d'une ",(0,a.yg)("inlineCode",{parentName:"h3"},"List")),(0,a.yg)("p",null,"La d\xe9claration utilise la syntaxe de cr\xe9ation d'objets avec une modification. On inclut le type d'\xe9l\xe9ments \xe0 avoir en tant que classe g\xe9n\xe9rique. "),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},"// D\xe9claration de liste vide\nList<int> numbers = new List<int>();\n\n// D\xe9claration d'une liste avec des valeurs\nList<int> numbers = new List<int>() { 1, 2, 3 };\nList<int> numbers = new List<int> { 1, 2, 3 }; // Syntaxe Alternative\n")),(0,a.yg)("h3",{id:"indexer-un-\xe9l\xe9ment"},"Indexer un \xe9l\xe9ment"),(0,a.yg)("p",null,"L'indexage de liste se fait comme un tableau avec les ",(0,a.yg)("inlineCode",{parentName:"p"},"[]"),". Ne pas oublier que les cases commence \xe0 0."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},'List<string> words = new List<string>() { "apple", "banana", "corn", "durian" };\n\n// Affiche "corn"\nConsole.WriteLine(words[2]);\n\n// Modifie "apple" pour "avocado"\nwords[0] = "avocado";\n')),(0,a.yg)("h3",{id:"ajoutez-et-retirer-des-\xe9l\xe9ments-de-la-liste"},"Ajoutez et retirer des \xe9l\xe9ments de la liste"),(0,a.yg)("p",null,"Les listes ont les m\xe9thodes ",(0,a.yg)("inlineCode",{parentName:"p"},"add")," et ",(0,a.yg)("inlineCode",{parentName:"p"},"insert")," pour faire l'ajour d'\xe9l\xe9ment dans la liste."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},'List<string> words = new List<string>();\nwords.Add("apple");\n\nList<string> words = new List<string>() { "apple", "banana", "durian" };\nwords.Insert(2, "corn");\n')),(0,a.yg)("p",null,"Pour retirer des \xe9l\xe9ment ",(0,a.yg)("inlineCode",{parentName:"p"},"Remove"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"RemoveAt")," et ",(0,a.yg)("inlineCode",{parentName:"p"},"clear")," peuvent supprimer des \xe9l\xe9ments trouver, \xe0 un index pr\xe9cit ou toute la liste."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},'List<string> words = new List<string>() { "apple", "banana", "corn", "durian" };\nwords.Remove("banana");\n\n// Enl\xe8ve "apple" qui est \xe0 la case 0\nwords.RemoveAt(0);\n\n// Supprime tous les \xe9l\xe9ments\nwords.Clear();\n')),(0,a.yg)("h3",{id:"parcourir-les-listes"},"Parcourir les listes"),(0,a.yg)("p",null,"La boucle ",(0,a.yg)("inlineCode",{parentName:"p"},"foreach")," fonctionne avec les listes."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},"foreach (string word in words)\n{\n    Console.WriteLine(word)\n}\n")),(0,a.yg)("p",null,"On ne peut pas modifier la taille de la liste dans un foreach. Si tel est le but, on utilise une boucle for normale."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},"for (int index = 0; index < ships.Count; index++)\n{\n    Ship ship = ships[index];\n    ship.Update();\n    if (ship.IsDead)\n    {\n        ships.Remove(ship);\n        index--; \n    }\n}\n")))}m.isMDXComponent=!0}}]);