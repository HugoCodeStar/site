"use strict";(self.webpackChunkhugo_code_star_site=self.webpackChunkhugo_code_star_site||[]).push([[762],{2967:(e,n,s)=>{s.r(n),s.d(n,{contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>o});var t=s(8168),a=(s(6540),s(5680));const l={title:"Programmation Orient\xe9-objet",sidebar_label:"2 - Orient\xe9-objet",sidebar_position:2},r=void 0,i={unversionedId:"b07/cours/cours2",id:"b07/cours/cours2",isDocsHomePage:!1,title:"Programmation Orient\xe9-objet",description:"M\xe9thode simplifi\xe9 avec syntaxe courte",source:"@site/docs/b07/cours/cours2.md",sourceDirName:"b07/cours",slug:"/b07/cours/cours2",permalink:"/site/docs/b07/cours/cours2",editUrl:"https://github.com/HugoCodeStar/site/edit/master/docs/b07/cours/cours2.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Programmation Orient\xe9-objet",sidebar_label:"2 - Orient\xe9-objet",sidebar_position:2},sidebar:"B07Sidebar",previous:{title:"1 - Bases",permalink:"/site/docs/b07/cours/cours1"},next:{title:"3 - Propri\xe9t\xe9s",permalink:"/site/docs/b07/cours/cours3"}},o=[{value:"M\xe9thode simplifi\xe9 avec syntaxe courte",id:"m\xe9thode-simplifi\xe9-avec-syntaxe-courte",children:[]},{value:"\xc9num\xe9rations",id:"\xe9num\xe9rations",children:[]},{value:"Tuples",id:"tuples",children:[]},{value:"Programmation orient\xe9 objet",id:"programmation-orient\xe9-objet",children:[{value:"Objets",id:"objets",children:[]},{value:"Classes",id:"classes",children:[]}]},{value:"Constructions d&#39;une classe",id:"constructions-dune-classe",children:[{value:"D\xe9finition d&#39;une classe",id:"d\xe9finition-dune-classe",children:[]},{value:"Variable d&#39;instance de la classe",id:"variable-dinstance-de-la-classe",children:[]},{value:"M\xe9thodes d&#39;une classe",id:"m\xe9thodes-dune-classe",children:[]}]},{value:"Instance de la classe",id:"instance-de-la-classe",children:[{value:"Constructeurs",id:"constructeurs",children:[]}]},{value:"R\xe9f\xe9rence <code>this</code>",id:"r\xe9f\xe9rence-this",children:[]},{value:"Modificateurs d&#39;acc\xe8s",id:"modificateurs-dacc\xe8s",children:[{value:"Getter &amp; Setter",id:"getter--setter",children:[]},{value:"Utilisation d&#39;un constructeur dans un autre",id:"utilisation-dun-constructeur-dans-un-autre",children:[]},{value:"Omission du nom de la classe avec <code>new</code>",id:"omission-du-nom-de-la-classe-avec-new",children:[]}]}],u={toc:o},c="wrapper";function d(e){let{components:n,...s}=e;return(0,a.yg)(c,(0,t.A)({},u,s,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"m\xe9thode-simplifi\xe9-avec-syntaxe-courte"},"M\xe9thode simplifi\xe9 avec syntaxe courte"),(0,a.yg)("p",null,"Quand un m\xe9thode n'a qu'une seule instruction de retour, il est possible d'utiliser un syntaxe simplifi\xe9 pour la m\xe9thode."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},"// Exemple d'une m\xe9thode avec seulement un retour\nint DoubleAndAddOne(int value)\n{\n    return value * 2 + 1;\n}\n\n// Syntaxe simplifi\xe9\nint DoubleAddOne(int value) => value * 2 + 1;\n")),(0,a.yg)("h2",{id:"\xe9num\xe9rations"},"\xc9num\xe9rations"),(0,a.yg)("p",null,"Il est possible d'avoir un type repr\xe9sentant une liste d'\xe9tat. Ce type est ensuite utilisable comme variable et seulement les \xe9tats donn\xe9s seront possiblement utilisable."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},"// D\xe9claration d'une \xe9num\xe9ration (la d\xe9claration doit se faire a la fin du code)\n\nenum Season { Winter, Spring, Summer, Fall }\n")),(0,a.yg)("p",null,"Il est ensuite possible de d\xe9clarer des variable de ce type est d'utiliser les \xe9tats avec le ",(0,a.yg)("inlineCode",{parentName:"p"},".")," apr\xe8s le nom de l'\xe9num\xe9ration."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},'Season mySeason;\n\nmySeason = Season.Winter;\n\nif (mySeason == Season.Winter){\n    Console.WriteLine("It\'s winter time!");\n}\n')),(0,a.yg)("h2",{id:"tuples"},"Tuples"),(0,a.yg)("p",null,"Les tuples permettent de joindre plusieurs \xe9l\xe9ments dans un seul contenant/variable."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},'// D\xe9claration d\'une variable avec un tuple\n// On identifie les types des valeurs entre parenth\xe8se\n// L\'assignation se fait entre parenth\xe8ses\n(string, int, int) score = ("R2-D2", 12340, 12);\n\n// On acc\xe8de au \xe9l\xe9ment avec le nom de la variable et un acc\xe8s avec un . suivit du mot Item#\n// o\xf9 le # est le num\xe9ro de la position voulu\nConsole.WriteLine($"Le nom est : {score.Item1}");\n')),(0,a.yg)("p",null,"Il est aussi possible de nomm\xe9 les champs pour le pas avoir le ",(0,a.yg)("inlineCode",{parentName:"p"},"Item#")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},'// La d\xe9clarations peut contenir des noms\n(string Name, int Points, int Level) score = ("R2-D2", 12340, 12);\n\nConsole.WriteLine($"Le nom est : {score.Name}");\n')),(0,a.yg)("p",null,"Il est finalement possible de d\xe9construire le tuple avec un assignation a plusieurs variables"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},'(string Name, int Points, int Level) score = ("R2-D2", 12340, 12);\n\nstring myName;\nint myPoints;\nint myLevel;\n\n(myName, myPoints, myLevel) = score;\n\n// Il est aussi possible d\'omettre un des \xe9l\xe9ments avec un _\n(myName, _, myLevel) = score;\n')),(0,a.yg)("h2",{id:"programmation-orient\xe9-objet"},"Programmation orient\xe9 objet"),(0,a.yg)("h3",{id:"objets"},"Objets"),(0,a.yg)("p",null,"En programmation orient\xe9e-objet, les informations d'un programme sont structur\xe9es avec des objets.\nUn objet est la repr\xe9sentation d'un \xe9l\xe9ment ou d'une structure de la probl\xe9matique du probl\xe8me."),(0,a.yg)("p",null,"Les objets ont toujours deux informations primordiales:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Donn\xe9es, nomm\xe9es attributs ou champs/fields/attributes"),(0,a.yg)("li",{parentName:"ul"},"Comportement, nomm\xe9 m\xe9thodes/methods")),(0,a.yg)("h3",{id:"classes"},"Classes"),(0,a.yg)("p",null,"Pour regrouper les objets de m\xeame type ensemble (ceux avec les m\xeames types de donn\xe9es et comportement possibles), nous \xe9tablirons des classes d'objets qui permettent de d\xe9finir ce que pourront contenir les objets de ladite classe."),(0,a.yg)("h2",{id:"constructions-dune-classe"},"Constructions d'une classe"),(0,a.yg)("p",null,"Nous pouvons cr\xe9er nos propres classes. Une fois la classe cr\xe9\xe9e, nous pourrons ensuite faire des instances de la classe dans nos programmes qui utiliseront les m\xe9thodes con\xe7ues pour la classe."),(0,a.yg)("h3",{id:"d\xe9finition-dune-classe"},"D\xe9finition d'une classe"),(0,a.yg)("p",null,"Une classe se retrouve dans un bloc de code repr\xe9sentant la classe. Elle va inclure ses donn\xe9es et les comportements possibles de la classe."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},"// La d\xe9finition de classes se fait a la fin du fichier source.\nclass Score\n{\n\n}\n")),(0,a.yg)("h3",{id:"variable-dinstance-de-la-classe"},"Variable d'instance de la classe"),(0,a.yg)("p",null,"La premi\xe8re chose \xe0 rajouter \xe0 une classe est la liste des champs de la classe. Les variables qui seront rattach\xe9es aux donn\xe9es devant \xeatre incluses dans les objets de notre classe"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},"class Score\n{\n    public string name; // Chaque variable a un modificateur d'acc\xe8s (public pour l'instant)\n    public int point; // Les variables seront disponibles pour chaque objet de la classe\n    public int level;\n}\n")),(0,a.yg)("h3",{id:"m\xe9thodes-dune-classe"},"M\xe9thodes d'une classe"),(0,a.yg)("p",null,"Les m\xe9thodes sont les actions ou les comportements que nos objets peuvent prendre. Il faut aussi des m\xe9thodes pour les accesseurs et mutateurs."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},"class Score\n{\n    public string name;\n    public int points;\n    public int level;\n\n    // Des m\xe9thodes peuvent \xeatre propres \xe0 la classe\n    // L'exemple de m\xe9thode ici utilise la syntaxe simplifi\xe9 de m\xe9thode\n    public bool EarnedStar() => (points / level) > 1000;\n}\n")),(0,a.yg)("h2",{id:"instance-de-la-classe"},"Instance de la classe"),(0,a.yg)("p",null,"Les objets partent de classes et doivent \xeatre construits avant d'\xeatre utilis\xe9s. Pour utiliser des objets, il nous faut donc utiliser un constructeur qui pourra cr\xe9er un objet qui sera ensuite sauvegard\xe9 dans une variable du bon type."),(0,a.yg)("p",null,"Le mot cl\xe9 ",(0,a.yg)("inlineCode",{parentName:"p"},"new")," permet de cr\xe9er un objet \xe0 partir du constructeur de la classe. Le constructeur est une m\xe9thode qui porte le m\xeame nom que la classe et peut recevoir les donn\xe9es initiales de l'objet."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},"Score best = new Score();\n")),(0,a.yg)("p",null,"Avec l'instance de la classe cr\xe9\xe9, il est maintenant possible d'acc\xe9d\xe9 aux \xe9l\xe9ments de la classe avec le ",(0,a.yg)("inlineCode",{parentName:"p"},"."),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},'Score best = new Score();\n\nbest.name = "R2-D2";\nbest.points = 12420;\nbest.level = 15;\n\nif (best.EarnedStar())\n{\n    Console.WriteLine("You earned a star.");\n}\n\n// Il est possible (et probable) d\'avoir plusieurs instance de la classe\nScore a = new Score();\n\n// Chaque instance contient sa propre version des variables avec leurs valeurs propres\na.points = 999;\n\nConsole.WriteLine($"best points = {best.points}\\na points = {a.points}");\n\n')),(0,a.yg)("h3",{id:"constructeurs"},"Constructeurs"),(0,a.yg)("p",null,"Pour construire nos objets, il faut impl\xe9menter une classe pour ce constructeur. Le nom de la m\xe9thode du constructeur est toujours le nom de la classe."),(0,a.yg)("p",null,"Les constructeurs sont une m\xe9thode sp\xe9ciale qui n'a pas de retour."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},"\nclass Score\n{\n    public string name;\n    public int points;\n    public int level;\n\n    // Le constructeur n'a pas de retour et a le nom de la classe\n    public Score()\n    {\n        // \xc0 l'int\xe9rieur de m\xe9thode, les variables de la classe sont accessible directement\n        name = \"Unknown\";\n        points = 0;\n        level = 1;\n    }\n    public bool EarnedStar() => (points / level) > 1000;\n}\n")),(0,a.yg)("p",null,"Il est possible d'avoir des constructeur avec des param\xe8tres d'entr\xe9s. On peut aussi m\xe9langer plusieurs constructeurs avec diff\xe9rentes listes de param\xe8tres (d'avoir une m\xe9thode du m\xeame nom avec des signatures diff\xe9rentes se nomme du polymorphisme)."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},'class Score\n{\n    public string name;\n    public int points;\n    public int level;\n\n    public Score()\n    {\n        name = "Unknown";\n        points = 0;\n        level = 1;\n    }\n\n    public Score(string n)\n    {\n        name = n;\n        points = 0;\n        level = 1;\n    }\n    public bool EarnedStar() => (points / level) > 1000;\n}\n')),(0,a.yg)("p",null,"Il est aussi possible de donner des valeurs par d\xe9fault avec l'initialisation des variables de la classe."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},'class Score\n{\n    public string name = "Unknown";\n    public int points = 0;\n    public int level = 1;\n\n    public Score(){}\n\n    public Score(string n)\n    {\n        name = n;\n    }\n    public bool EarnedStar() => (points / level) > 1000;\n}\n')),(0,a.yg)("h2",{id:"r\xe9f\xe9rence-this"},"R\xe9f\xe9rence ",(0,a.yg)("inlineCode",{parentName:"h2"},"this")),(0,a.yg)("p",null,"On peut utiliser la r\xe9f\xe9rence ",(0,a.yg)("inlineCode",{parentName:"p"},"this")," dans un objet pour faire r\xe9f\xe9rence \xe0 l'objet lui-m\xeame. Consid\xe9r\xe9 que c'est une variable toujours disponible."),(0,a.yg)("p",null,"On l'utilise quand il faut distinguer des ambig\xfcit\xe9s possibles. Par exemple, durant l'utilisation de param\xe8tres portant le m\xeame nom que des variables d'instance."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},'```c#\nclass Score\n{\n    public string name = "Unknown";\n\n    public Score(string name)\n    {\n        // Sans le this, il y a un conflit sur l\'identificateur name!\n        this.name = name;\n    }\n\n}\n')),(0,a.yg)("h2",{id:"modificateurs-dacc\xe8s"},"Modificateurs d'acc\xe8s"),(0,a.yg)("p",null,"Par d\xe9faut, les champs et m\xe9thodes d'une classe sont disponibles \xe0 toutes les instances venant du m\xeame paquet."),(0,a.yg)("p",null,"Nous pouvons modifier les acc\xe8s avec des mots cl\xe9s."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"public")," - Disponible \xe0 tous"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"private")," - Disponible \xe0 l'instance de l'objet seulement"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"internal")," - Disponible au niveau du projet")),(0,a.yg)("p",null,"Pour bien encapsuler nos donn\xe9es, nous voulons que toutes les variables d'instance soit ",(0,a.yg)("inlineCode",{parentName:"p"},"private")," et que toutes m\xe9thodes ne devant pas \xeatre utilis\xe9es \xe0 l'ext\xe9rieur de la classe aussi."),(0,a.yg)("h3",{id:"getter--setter"},"Getter & Setter"),(0,a.yg)("p",null,"Avec des variables priv\xe9es, il nous faudra des m\xe9thodes qui permettent l'acc\xe8s a nos variables. Ces m\xe9thodes sont nomm\xe9s Getter et Setter, nous verrons plus tard que c# permet de les g\xe9n\xe9rer automatiquement."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},"class Rectangle\n{\n    private float _width;\n    private float _height;\n    public Rectangle(float width, float height)\n    {\n        _width = width;\n        _height = height;\n    }\n    public float GetWidth() => _width;\n    public float GetHeight() => _height;\n\n    // On peut avoir plus de Getter que de variables si l'information est d\xe9riv\xe9.\n    public float GetArea() => _width * _height;\n    \n    public void SetWidth(float value) => _width = value;\n    public void SetHeight(float value) => _height = value;\n}\n")),(0,a.yg)("h3",{id:"utilisation-dun-constructeur-dans-un-autre"},"Utilisation d'un constructeur dans un autre"),(0,a.yg)("p",null,"Il est possible d'utiliser une constructeur dans un autre constructeur"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},'class Score\n{\n    public string _name;\n    public int _points;\n    public int _level;\n\n    public Score() : this("Unknown", 0, 1) \n    {\n    }\n\n    public Score(string name, int points, int level)\n    {\n        _name = name;\n        _points = points;\n        _level = level;\n    }\n}\n')),(0,a.yg)("h3",{id:"omission-du-nom-de-la-classe-avec-new"},"Omission du nom de la classe avec ",(0,a.yg)("inlineCode",{parentName:"h3"},"new")),(0,a.yg)("p",null,"Il est possible d'ommetre le nom de la classe avec l'utilisation du new avec la d\xe9claration d'une variable de cette classe."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c#"},'Score first = new();\nScore second = new("R2-D2", 12420, 15);\n')))}d.isMDXComponent=!0},5680:(e,n,s)=>{s.d(n,{xA:()=>c,yg:()=>g});var t=s(6540);function a(e,n,s){return n in e?Object.defineProperty(e,n,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[n]=s,e}function l(e,n){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),s.push.apply(s,t)}return s}function r(e){for(var n=1;n<arguments.length;n++){var s=null!=arguments[n]?arguments[n]:{};n%2?l(Object(s),!0).forEach((function(n){a(e,n,s[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):l(Object(s)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(s,n))}))}return e}function i(e,n){if(null==e)return{};var s,t,a=function(e,n){if(null==e)return{};var s,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)s=l[t],n.indexOf(s)>=0||(a[s]=e[s]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)s=l[t],n.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(a[s]=e[s])}return a}var o=t.createContext({}),u=function(e){var n=t.useContext(o),s=n;return e&&(s="function"==typeof e?e(n):r(r({},n),e)),s},c=function(e){var n=u(e.components);return t.createElement(o.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var s=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(s),m=a,g=d["".concat(o,".").concat(m)]||d[m]||p[m]||l;return s?t.createElement(g,r(r({ref:n},c),{},{components:s})):t.createElement(g,r({ref:n},c))}));function g(e,n){var s=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=s.length,r=new Array(l);r[0]=m;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i[d]="string"==typeof e?e:a,r[1]=i;for(var u=2;u<l;u++)r[u]=s[u];return t.createElement.apply(null,r)}return t.createElement.apply(null,s)}m.displayName="MDXCreateElement"}}]);