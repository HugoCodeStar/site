"use strict";(self.webpackChunkhugo_code_star_site=self.webpackChunkhugo_code_star_site||[]).push([[3323],{5680:(e,n,r)=>{r.d(n,{xA:()=>c,yg:()=>g});var t=r(6540);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var u=t.createContext({}),o=function(e){var n=t.useContext(u),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},c=function(e){var n=o(e.components);return t.createElement(u.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=o(r),m=i,g=d["".concat(u,".").concat(m)]||d[m]||p[m]||a;return r?t.createElement(g,l(l({ref:n},c),{},{components:r})):t.createElement(g,l({ref:n},c))}));function g(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,l=new Array(a);l[0]=m;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s[d]="string"==typeof e?e:i,l[1]=s;for(var o=2;o<a;o++)l[o]=r[o];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7804:(e,n,r)=>{r.r(n),r.d(n,{contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var t=r(8168),i=(r(6540),r(5680));const a={title:"Programmes \xe0 faire de l'atelier 2",sidebar_label:"2 - Listes, fichiers et chaines de caract\xe8res"},l=void 0,s={unversionedId:"db4/atelier/atelier2",id:"db4/atelier/atelier2",isDocsHomePage:!1,title:"Programmes \xe0 faire de l'atelier 2",description:"Pour chacunes des pr\xe9sentations suivantes, \xe9crivez la fonction qui correspond \xe0 la demande.",source:"@site/docs/db4/atelier/atelier2.md",sourceDirName:"db4/atelier",slug:"/db4/atelier/atelier2",permalink:"/site/docs/db4/atelier/atelier2",editUrl:"https://github.com/HugoCodeStar/site/edit/master/docs/db4/atelier/atelier2.md",tags:[],version:"current",frontMatter:{title:"Programmes \xe0 faire de l'atelier 2",sidebar_label:"2 - Listes, fichiers et chaines de caract\xe8res"},sidebar:"DB4Sidebar",previous:{title:"1 - Bases",permalink:"/site/docs/db4/atelier/atelier1"},next:{title:"3 - Classes, fichiers structur\xe9s et SQLite",permalink:"/site/docs/db4/atelier/atelier3"}},u=[{value:"affiche_double_liste",id:"affiche_double_liste",children:[]},{value:"produit_cumulatif",id:"produit_cumulatif",children:[]},{value:"indice_min_liste",id:"indice_min_liste",children:[]},{value:"diff_entre_max_min",id:"diff_entre_max_min",children:[]},{value:"tout_indice_min_liste",id:"tout_indice_min_liste",children:[]},{value:"suppr_valeur_seuil",id:"suppr_valeur_seuil",children:[]},{value:"ecart_type",id:"ecart_type",children:[]},{value:"dist_entre_points",id:"dist_entre_points",children:[]},{value:"print_file_line_numbers",id:"print_file_line_numbers",children:[]},{value:"write_fibonacci",id:"write_fibonacci",children:[]},{value:"find_max_score_name",id:"find_max_score_name",children:[]},{value:"most_frequent_character",id:"most_frequent_character",children:[]},{value:"word_separator",id:"word_separator",children:[]},{value:"convert_alpha_telephone",id:"convert_alpha_telephone",children:[]}],o={toc:u},c="wrapper";function d(e){let{components:n,...r}=e;return(0,i.yg)(c,(0,t.A)({},o,r,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"Pour chacunes des pr\xe9sentations suivantes, \xe9crivez la fonction qui correspond \xe0 la demande."),(0,i.yg)("h1",{id:"liste-et-tuples"},"Liste et tuples"),(0,i.yg)("h2",{id:"affiche_double_liste"},"affiche_double_liste"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"Affiche les valeurs doubl\xe9es de chaque \xe9l\xe9ments de la liste\n\nArgs:\n    liste: La liste de valeurs \xe0 doubler et afficher.\n")),(0,i.yg)("p",null,"Exemple :"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},">> affiche_double_liste([4, 5, 12, 11])\n8\n10\n24\n22\n")),(0,i.yg)("h2",{id:"produit_cumulatif"},"produit_cumulatif"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"Produit cumulatif des valeurs d'une liste.\n\nArgs:\n    liste: Liste de valeurs\n\nReturns:\n    Produit cumulatif des valeurs\n")),(0,i.yg)("h2",{id:"indice_min_liste"},"indice_min_liste"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"Indice de position de la valeur la plus petite de la liste.\n\nArgs:\n    liste: Liste de valeurs\n\nReturns:\n    Indice de la valeur minimum de la liste.\n")),(0,i.yg)("h2",{id:"diff_entre_max_min"},"diff_entre_max_min"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"Diff\xe9rence entre la valeur maxium et la valeur minimum de la liste.\n\nArgs:\n    liste: Liste de valeurs\n\nReturns:\n    La diff\xe9rence entre le min et max.\n")),(0,i.yg)("h2",{id:"tout_indice_min_liste"},"tout_indice_min_liste"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"Tous les indices de positions de la valeur minimum. Avec plusieurs emplacements\nde la valeur minimum. On retourne une liste de positions.\n\nArgs:\n    liste: Liste de valeurs\n\nReturns:\n    Liste de positions du minimum\n")),(0,i.yg)("h2",{id:"suppr_valeur_seuil"},"suppr_valeur_seuil"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"Supprime tous les \xe9l\xe9ments plus grand que la valeur de seuil.\n\nArgs:\n    seuil: Valeur de seuil\n    liste: Liste de valeurs\n\nReturns:\n    Liste modifi\xe9 avec les valeurs plus grandes que le seuil supprimer.\n")),(0,i.yg)("h2",{id:"ecart_type"},"ecart_type"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"D\xe9termine l'\xe9cart type des valeurs de la liste.\n\nArgs:\n    liste: Liste de valeurs\n\nReturns:\n    L'\xe9cart type de la liste.\n")),(0,i.yg)("h2",{id:"dist_entre_points"},"dist_entre_points"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"D\xe9termine la distance entre deux points de coodonn\xe9es cart\xe9siennes.\n\nArgs:\n    point1: Liste de deux \xe9l\xe9ments qui repr\xe9sente la point en [x, y]\n    point2: Liste de deux \xe9l\xe9ments qui repr\xe9sente la point en [x, y]\n\nReturns:\n    Distance entre les deux points re\xe7us.\n")),(0,i.yg)("h1",{id:"fichiers"},"Fichiers"),(0,i.yg)("h2",{id:"print_file_line_numbers"},"print_file_line_numbers"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"Affiche toutes les lignes d'un fichier avec un num\xe9ro de ligne ajout\xe9 \xe0 chaque lignes.\nArgs:\n    filename: Le nom du fichier\n")),(0,i.yg)("p",null,"Exemple :"),(0,i.yg)("p",null,"Avec le fichier ",(0,i.yg)("inlineCode",{parentName:"p"},"test1.txt")," suivant :"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"Salut\nBonjour\nAllo\n")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},">>> print_file_line_numbers('test1.txt')\n1 - Salut\n2 - Bonjour\n3 - Allo\n")),(0,i.yg)("h2",{id:"write_fibonacci"},"write_fibonacci"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"\xc9crit dans une fichier un certain nombre de la suite de Fibonacci.\nChaque nombre est sur sa propre ligne.\nArgs:\n    filename: Nom du fichier \xe0 \xe9crire\n    n: Le nombre d'\xe9l\xe9ments de la s\xe9quence \xe0 \xe9crire\n")),(0,i.yg)("p",null,"Exemple :"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},">>> write_fibonacci('test2.txt', 10)\n")),(0,i.yg)("p",null,"\xc9crite le ficiher ",(0,i.yg)("inlineCode",{parentName:"p"},"test2.txt")," suivant :"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n")),(0,i.yg)("h2",{id:"find_max_score_name"},"find_max_score_name"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"Trouve et retourne le nom de la personne avec le plus haut score \xe0 partir\nd'un fichier qui contient les noms et scores de plusieurs personnes.\nLe fichier contient sur une s\xe9rie de score avec le nom et le score sur des lignes\nindividuelles.\n\nArgs:\n    filename: Le nom du fichier avec les scores.\n\nReturns:\n    Le nom de la personne avec le plus haut score.\n")),(0,i.yg)("p",null,"Exemple : "),(0,i.yg)("p",null,"Avec le fichier ",(0,i.yg)("inlineCode",{parentName:"p"},"test3.txt.")," suivant : "),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"Max\n45\nBob\n78\nJulie\n89\nCeline\n80\n")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},">>> print(find_max_score_name('test3.txt'))\nJulie\n")),(0,i.yg)("h1",{id:"chaine-de-caract\xe8res"},"Chaine de caract\xe8res"),(0,i.yg)("h2",{id:"most_frequent_character"},"most_frequent_character"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"Trouve le caract\xe8re le plus utiliser \xe0 l'int\xe9rieur d'une chaine.\nArgs:\n    string: La chaine \xe0 \xe9valuer.\n\nReturns:\n    Le caract\xe8re le plus utilis\xe9 dans la chaine.\n")),(0,i.yg)("p",null,"Exemples:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'>>> most_frequent_character("salut tous!")\ns\n')),(0,i.yg)("h2",{id:"word_separator"},"word_separator"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"Convertis une chaine de caract\xe8res en camelCase en phrase normale. L'entr\xe9e\nen camelCase est une chaine ou tous les mots d'une phrase sont indiqu\xe9s par une\nlettre majuscule et non par des espaces.\nArgs:\n    string: La chaine en camelCase.\n\nReturns:\n    La chaine en phrase normale avec des espaces entre chaque mot.\n")),(0,i.yg)("p",null,"Exemples:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'>>> word_separator("HelloMyWorld")\nHello my world\n')),(0,i.yg)("h2",{id:"convert_alpha_telephone"},"convert_alpha_telephone"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"Traducteur de num\xe9ro de t\xe9l\xe9phone alphab\xe9tique\nDe nombreuses entreprises utilisent des num\xe9ros de t\xe9l\xe9phone \ntels que 555-GET-FOOD afin que leurs clients se souviennent plus \nfacilement du num\xe9ro. Sur un t\xe9l\xe9phone standard, les lettres \nalphab\xe9tiques sont mapp\xe9es aux nombres de la mani\xe8re suivante:\nA, B et C = 2\nD, E et F = 3\nG, H et I = 4\nJ, K et L = 5\nM, N et O = 6 P, Q, R et S = 7 T, U et V = 8\nW, X, Y et Z = 9\n\xc9crivez une fonction qui re\xe7oit un num\xe9ro de t\xe9l\xe9phone \xe0 10 \ncaract\xe8res au format XXX-XXX-XXXX. L'application doit retourner \nle num\xe9ro de t\xe9l\xe9phone avec tous les caract\xe8res alphab\xe9tiques \napparaissant dans l'original traduit en leur \xe9quivalent \nnum\xe9rique. Par exemple, si l'utilisateur entre 555-GET-FOOD, \nl'application doit retourner 555-438-3663.\n")))}d.isMDXComponent=!0}}]);